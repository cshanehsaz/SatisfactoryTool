{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cshan\\\\Box Sync\\\\website\\\\satisfactory2\\\\src\\\\components\\\\canvas.js\";\nimport React from 'react';\nimport Machine from './machine.js';\nimport Conveyer from './conveyer.js';\nimport MachineCursor from './machineCursor.js';\nimport MachineName from './machineName.js';\nimport MachineNode from '../backend/machineNode.js';\nimport MachineOutput from './machineOutput.js';\nimport '../css/canvas.css';\nimport { findAllByAltText } from '@testing-library/react';\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: 0,\n      y: 0,\n      nodes: [],\n      conveyers: [],\n      currentTarget: null,\n      selector: false\n    };\n  }\n\n  handleMachineClick(e) {\n    //conveyer connector tool\n    e.stopPropagation(); //selects clicked node as current target and prep for next click\n\n    if (!this.state.selector) {\n      this.setState({\n        currentTarget: this.handleMachineClickHelper(this.state.nodes, e),\n        selector: true\n      });\n    } //creates conveyer\n    else {\n        let parentNode = this.state.currentTarget;\n        let childNode = this.handleMachineClickHelper(this.state.nodes, e);\n        parentNode.data.addChild(childNode.data);\n        parentNode.data.wipeChildrenInput();\n        console.log(parentNode.data);\n        parentNode.data.sendOutput();\n        let _conveyers = this.state.conveyers;\n\n        _conveyers.push({\n          x1: parentNode.x,\n          y1: parentNode.y,\n          x2: childNode.x,\n          y2: childNode.y\n        });\n\n        this.setState({\n          conveyers: _conveyers,\n          currentTarget: {},\n          selector: false\n        });\n      }\n  }\n\n  handleMachineClickHelper(nodes, e) {\n    for (let node of nodes) {\n      if (node.x === Number(e.target.getAttribute(\"cx\")) && node.y === Number(e.target.getAttribute(\"cy\"))) {\n        return node;\n      }\n    }\n  }\n\n  _onMouseMove(e) {\n    let rect = e.target.getBoundingClientRect();\n    this.setState({\n      x: e.screenX - rect.x,\n      y: e.screenY - rect.y - rect.top + 50\n    }); //50 to fix the bugs with cursors\n  }\n\n  _onClick(e) {\n    //at some point make this so that it's not redrawing all of them every frame, just stamps somewhere more permanent instead\n    let _nodes = this.state.nodes;\n    this.fetchMachineData(this.props.tool, this.state.nodes);\n  }\n\n  fetchMachineData(name, _nodes) {\n    //fetch request for all of the data so that we ensure it's only done once and stored in state\n    fetch('http://localhost:6969/getmachinedata?name=' + name).then(res => res.json()).then(res => {\n      console.log('response');\n      console.log(res);\n\n      let _data = new MachineNode(res.data[0].name, JSON.parse(res.data[0].maxInput1), JSON.parse(res.data[0].maxInput2), JSON.parse(res.data[0].maxInput3), JSON.parse(res.data[0].maxInput4), JSON.parse(res.data[0].output));\n\n      _nodes.push({\n        x: this.state.x,\n        y: this.state.y,\n        data: _data\n      });\n\n      console.log(_nodes);\n      this.setState({\n        nodes: _nodes\n      });\n    });\n  }\n\n  render() {\n    const {\n      x,\n      y\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseMove: this._onMouseMove.bind(this),\n      onClick: this._onClick.bind(this),\n      className: \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      width: \"100%\",\n      height: \"100%\",\n      className: this.state.selector ? \"canvas-selector\" : \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, this.state.nodes.map(node => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Machine, {\n      onClick: this.handleMachineClick.bind(this),\n      x: node.x,\n      y: node.y,\n      data: node.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(MachineOutput, {\n      x: node.x,\n      y: node.y,\n      data: node.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(MachineName, {\n      name: node.data.name,\n      x: node.x,\n      y: node.y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    }))), this.state.conveyers.map(conveyer => /*#__PURE__*/React.createElement(Conveyer, {\n      x1: conveyer.x1,\n      y1: conveyer.y1,\n      x2: conveyer.x2,\n      y2: conveyer.y2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(MachineCursor, {\n      x: x,\n      y: y,\n      onMouseMove: this._onMouseMove.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\nexport default Canvas; // this.state.selector ? {cursor: \"pointer\"} : {cursor: \"auto\"}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/components/canvas.js"],"names":["React","Machine","Conveyer","MachineCursor","MachineName","MachineNode","MachineOutput","findAllByAltText","Canvas","Component","constructor","props","state","x","y","nodes","conveyers","currentTarget","selector","handleMachineClick","e","stopPropagation","setState","handleMachineClickHelper","parentNode","childNode","data","addChild","wipeChildrenInput","console","log","sendOutput","_conveyers","push","x1","y1","x2","y2","node","Number","target","getAttribute","_onMouseMove","rect","getBoundingClientRect","screenX","screenY","top","_onClick","_nodes","fetchMachineData","tool","name","fetch","then","res","json","_data","JSON","parse","maxInput1","maxInput2","maxInput3","maxInput4","output","render","bind","map","conveyer"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Machine from './machine.js'\r\nimport Conveyer from './conveyer.js'\r\nimport MachineCursor from './machineCursor.js'\r\nimport MachineName from './machineName.js'\r\nimport MachineNode from '../backend/machineNode.js'\r\nimport MachineOutput from './machineOutput.js'\r\nimport '../css/canvas.css'\r\nimport { findAllByAltText } from '@testing-library/react';\r\n\r\n\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        x: 0, \r\n        y: 0, \r\n        nodes: [],\r\n        conveyers: [],\r\n        currentTarget: null,\r\n        selector: false,\r\n      };\r\n\r\n    }\r\n\r\n    handleMachineClick(e) { //conveyer connector tool\r\n      e.stopPropagation()\r\n\r\n      //selects clicked node as current target and prep for next click\r\n      if(!this.state.selector) {\r\n        this.setState({\r\n          currentTarget: this.handleMachineClickHelper(this.state.nodes, e),\r\n          selector: true\r\n        })\r\n      }\r\n\r\n      //creates conveyer\r\n      else {\r\n        let parentNode = this.state.currentTarget\r\n        let childNode = this.handleMachineClickHelper(this.state.nodes, e)\r\n        parentNode.data.addChild(childNode.data)\r\n        parentNode.data.wipeChildrenInput()\r\n        console.log(parentNode.data)\r\n        parentNode.data.sendOutput()\r\n\r\n        let _conveyers = this.state.conveyers;\r\n        _conveyers.push({x1: parentNode.x, y1: parentNode.y, x2: childNode.x, y2: childNode.y});\r\n        this.setState({\r\n          conveyers: _conveyers,\r\n          currentTarget: {},\r\n          selector: false\r\n        })\r\n      }      \r\n    }\r\n\r\n    handleMachineClickHelper(nodes, e) {\r\n      for(let node of nodes) {\r\n        if(node.x === Number(e.target.getAttribute(\"cx\")) && node.y === Number(e.target.getAttribute(\"cy\"))) {\r\n          return(node)\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    _onMouseMove(e) {\r\n      let rect = e.target.getBoundingClientRect()\r\n      this.setState({ x: e.screenX - rect.x, y: e.screenY - rect.y - rect.top + 50}); //50 to fix the bugs with cursors\r\n    }\r\n\r\n    _onClick(e) { //at some point make this so that it's not redrawing all of them every frame, just stamps somewhere more permanent instead\r\n      let _nodes = this.state.nodes;\r\n      this.fetchMachineData(this.props.tool, this.state.nodes)\r\n    }\r\n\r\n    fetchMachineData(name, _nodes) {\r\n      //fetch request for all of the data so that we ensure it's only done once and stored in state\r\n        fetch('http://localhost:6969/getmachinedata?name=' + name)\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            console.log('response')\r\n            console.log(res)\r\n            let _data = new MachineNode(\r\n                              res.data[0].name, \r\n                              JSON.parse(res.data[0].maxInput1),\r\n                              JSON.parse(res.data[0].maxInput2),\r\n                              JSON.parse(res.data[0].maxInput3),\r\n                              JSON.parse(res.data[0].maxInput4),\r\n                              JSON.parse(res.data[0].output)\r\n                            )\r\n            _nodes.push({x: this.state.x, y: this.state.y, data: _data})\r\n            console.log(_nodes)\r\n            this.setState({nodes: _nodes})\r\n            })\r\n    }\r\n  \r\n    render() {\r\n      const { x, y } = this.state;\r\n        return(\r\n          <div onMouseMove={this._onMouseMove.bind(this)} onClick={this._onClick.bind(this)} className=\"canvas\">\r\n            <svg width=\"100%\" height=\"100%\" className={this.state.selector ? \"canvas-selector\" : \"canvas\"}>\r\n              {/* maps all machines and conveyers */}\r\n              {/* need to be able to pass down all data stored in a machine object that we create in this class and store in the array instead of key/val chain */}\r\n              {this.state.nodes.map(node => \r\n                <>\r\n                  <Machine onClick={this.handleMachineClick.bind(this)} x={node.x} y={node.y} data={node.data}/>\r\n                  <MachineOutput x={node.x} y={node.y} data={node.data}/>\r\n                  <MachineName name={node.data.name} x={node.x} y={node.y}/>\r\n                </>\r\n              )}\r\n              {this.state.conveyers.map(conveyer => \r\n                <Conveyer x1={conveyer.x1} y1={conveyer.y1} x2={conveyer.x2} y2={conveyer.y2} />\r\n              )} \r\n              <MachineCursor x={x} y={y} onMouseMove={this._onMouseMove.bind(this)}/>\r\n            </svg>\r\n          </div>\r\n          )\r\n    }\r\n  }\r\n\r\nexport default Canvas;\r\n\r\n\r\n// this.state.selector ? {cursor: \"pointer\"} : {cursor: \"auto\"}"]},"metadata":{},"sourceType":"module"}