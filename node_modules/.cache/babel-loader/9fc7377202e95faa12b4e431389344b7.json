{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cshan\\\\Box Sync\\\\website\\\\satisfactory2\\\\src\\\\components\\\\canvas.js\";\nimport React from 'react';\nimport Machine from './machine.js';\nimport Conveyer from './conveyer.js';\nimport MachineCursor from './machineCursor.js';\nimport MachineName from './machineName.js';\nimport MachineNode from '../backend/machineNode.js';\nimport '../css/canvas.css';\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: 0,\n      y: 0,\n      nodes: [],\n      conveyers: [],\n      currentTarget: {},\n      selector: false\n    };\n  }\n\n  handleMachineClick(e) {\n    //conveyer connector tool\n    e.stopPropagation();\n\n    if (!this.state.selector) {\n      this.setState({\n        currentTarget: {\n          x1: e.target.getAttribute(\"cx\"),\n          y1: e.target.getAttribute(\"cy\")\n        },\n        selector: true\n      });\n    } else {\n      //creates a new conveyer\n      let _conveyers = this.state.conveyers;\n\n      _conveyers.push({\n        x1: this.state.currentTarget.x1,\n        y1: this.state.currentTarget.y1,\n        x2: e.target.getAttribute(\"cx\"),\n        y2: e.target.getAttribute(\"cy\")\n      });\n\n      this.setState({\n        conveyers: _conveyers,\n        currentTarget: {},\n        selector: false\n      });\n    }\n  }\n\n  _onMouseMove(e) {\n    let rect = e.target.getBoundingClientRect();\n    this.setState({\n      x: e.screenX - rect.x,\n      y: e.screenY - rect.y - rect.top + 50\n    }); //50 to fix the bugs with cursors\n  }\n\n  _onClick(e) {\n    //at some point make this so that it's not redrawing all of them every frame, just stamps somewhere more permanent instead\n    let _nodes = this.state.nodes;\n\n    let _data = new MachineNode(this.props.tool);\n\n    let fetchData; //fetch request for all of the data so that we ensure it's only done once and stored in state\n\n    fetch('http://localhost:6969/getmachinedata?name=' + this.props.tool).then(console.log(this.props.tool)).then(res => res.json()) // .then(obj => fetchData = obj)\n    .then(res => console.log(res));\n\n    _nodes.push({\n      x: this.state.x,\n      y: this.state.y,\n      data: _data\n    });\n\n    this.setState({\n      nodes: _nodes\n    }); //console.log(this.state);\n  }\n\n  render() {\n    const {\n      x,\n      y\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseMove: this._onMouseMove.bind(this),\n      onClick: this._onClick.bind(this),\n      className: \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      width: \"100%\",\n      height: \"100%\",\n      className: this.state.selector ? \"canvas-selector\" : \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, this.state.nodes.map(coordinate => /*#__PURE__*/React.createElement(Machine, {\n      onClick: this.handleMachineClick.bind(this),\n      x: coordinate.x,\n      y: coordinate.y,\n      data: coordinate.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 51\n      }\n    })), this.state.nodes.map(coordinate => /*#__PURE__*/React.createElement(MachineName, {\n      name: coordinate.data.name,\n      x: coordinate.x,\n      y: coordinate.y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 51\n      }\n    })), this.state.conveyers.map(coors => /*#__PURE__*/React.createElement(Conveyer, {\n      x1: coors.x1,\n      y1: coors.y1,\n      x2: coors.x2,\n      y2: coors.y2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 50\n      }\n    })), /*#__PURE__*/React.createElement(MachineCursor, {\n      x: x,\n      y: y,\n      onMouseMove: this._onMouseMove.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\nexport default Canvas; // this.state.selector ? {cursor: \"pointer\"} : {cursor: \"auto\"}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/components/canvas.js"],"names":["React","Machine","Conveyer","MachineCursor","MachineName","MachineNode","Canvas","Component","constructor","props","state","x","y","nodes","conveyers","currentTarget","selector","handleMachineClick","e","stopPropagation","setState","x1","target","getAttribute","y1","_conveyers","push","x2","y2","_onMouseMove","rect","getBoundingClientRect","screenX","screenY","top","_onClick","_nodes","_data","tool","fetchData","fetch","then","console","log","res","json","data","render","bind","map","coordinate","name","coors"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Machine from './machine.js'\r\nimport Conveyer from './conveyer.js'\r\nimport MachineCursor from './machineCursor.js'\r\nimport MachineName from './machineName.js'\r\nimport MachineNode from '../backend/machineNode.js'\r\nimport '../css/canvas.css'\r\n\r\n\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        x: 0, \r\n        y: 0, \r\n        nodes: [],\r\n        conveyers: [],\r\n        currentTarget: {},\r\n        selector: false,\r\n      };\r\n\r\n    }\r\n\r\n    handleMachineClick(e) { //conveyer connector tool\r\n      e.stopPropagation()\r\n\r\n      if(!this.state.selector) {\r\n        this.setState({\r\n          currentTarget: {x1: e.target.getAttribute(\"cx\"), y1: e.target.getAttribute(\"cy\")},\r\n          selector: true\r\n        })\r\n      }\r\n\r\n      else {\r\n        //creates a new conveyer\r\n        let _conveyers = this.state.conveyers;\r\n        _conveyers.push({x1: this.state.currentTarget.x1, y1: this.state.currentTarget.y1, x2: e.target.getAttribute(\"cx\"), y2: e.target.getAttribute(\"cy\")});\r\n        this.setState({\r\n          conveyers: _conveyers,\r\n          currentTarget: {},\r\n          selector: false\r\n        })\r\n      }\r\n      \r\n    }\r\n\r\n\r\n    _onMouseMove(e) {\r\n      let rect = e.target.getBoundingClientRect()\r\n      this.setState({ x: e.screenX - rect.x, y: e.screenY - rect.y - rect.top + 50}); //50 to fix the bugs with cursors\r\n    }\r\n\r\n    _onClick(e) { //at some point make this so that it's not redrawing all of them every frame, just stamps somewhere more permanent instead\r\n      let _nodes = this.state.nodes;\r\n      let _data = new MachineNode(this.props.tool)\r\n      let fetchData;\r\n\r\n      //fetch request for all of the data so that we ensure it's only done once and stored in state\r\n      fetch('http://localhost:6969/getmachinedata?name=' + this.props.tool)\r\n        .then(console.log(this.props.tool))\r\n        .then(res => res.json())\r\n        // .then(obj => fetchData = obj)\r\n        .then(res => console.log(res))\r\n\r\n      _nodes.push({x: this.state.x, y: this.state.y, data: _data});\r\n      this.setState({nodes: _nodes});\r\n      //console.log(this.state);\r\n    }\r\n  \r\n    render() {\r\n      const { x, y } = this.state;\r\n        return(\r\n          <div onMouseMove={this._onMouseMove.bind(this)} onClick={this._onClick.bind(this)} className=\"canvas\">\r\n            <svg width=\"100%\" height=\"100%\" className={this.state.selector ? \"canvas-selector\" : \"canvas\"}>\r\n              {/* maps all machines, machine names, and conveyers */}\r\n              {/* need to be able to pass down all data stored in a machine object that we create in this class and store in the array instead of key/val chain */}\r\n              {this.state.nodes.map(coordinate => <Machine onClick={this.handleMachineClick.bind(this)} x={coordinate.x} y={coordinate.y} data={coordinate.data}/>)}\r\n              {this.state.nodes.map(coordinate => <MachineName name={coordinate.data.name} x={coordinate.x} y={coordinate.y}/>)}\r\n              {this.state.conveyers.map(coors => <Conveyer x1={coors.x1} y1={coors.y1} x2={coors.x2} y2={coors.y2} />)} \r\n              <MachineCursor x={x} y={y} onMouseMove={this._onMouseMove.bind(this)}/>\r\n            </svg>\r\n          </div>\r\n          )\r\n    }\r\n  }\r\n\r\nexport default Canvas;\r\n\r\n\r\n// this.state.selector ? {cursor: \"pointer\"} : {cursor: \"auto\"}"]},"metadata":{},"sourceType":"module"}