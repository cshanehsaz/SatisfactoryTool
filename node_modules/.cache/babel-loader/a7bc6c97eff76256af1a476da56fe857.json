{"ast":null,"code":"export default class MachineNode {\n  constructor(_name, _input1, _input2, _input3, _input4, _output) {\n    this.name = _name;\n    this.children = [];\n    this.input1 = _input1; // {name:, amount:, max: }\n\n    this.input2 = _input2;\n    this.input3 = _input3;\n    this.input4 = _input4; //this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = _output; // this.width;\n    // this.height;\n    // this.cost = [];\n  }\n\n  getOutput() {\n    return this.output;\n  }\n\n  getChildren() {\n    return this.children;\n  }\n\n  getInput1() {\n    return this.input1;\n  }\n\n  getInput2() {\n    return this.input2;\n  }\n\n  getInput3() {\n    return this.input3;\n  }\n\n  getInput4() {\n    return this.input4;\n  }\n\n  getInput() {\n    return [this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()];\n  }\n\n  getAvailableInput(material) {\n    return this.getInputMax(material) - this.getInputAmount(material);\n  }\n\n  addInput(_name, _amount) {\n    this.input.push({\n      name: _name,\n      amount: _amount\n    });\n  }\n\n  addOutput(_name, _amount) {\n    this.output = {\n      name: _name,\n      amount: _amount\n    };\n  }\n\n  getInputAmount(material) {\n    if (this.getInput().length < 1) {\n      return 0;\n    }\n\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.amount;\n      } else {\n        return -1;\n      }\n    }\n  }\n\n  getInputMax(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.max;\n      }\n    }\n\n    return -1;\n  } // edit this so that it correctly splits the output \n  // and records how much of what is sent to which child\n\n\n  sendOutput() {\n    let material = this.getOutput().name;\n    let children = this.getChildren();\n    let effected = [];\n    let prevConsumption = 0;\n    let consumption = 0; //total amount of output consumed by children\n\n    for (let child of children) {\n      consumption += child.getAvailableInput(material);\n    }\n\n    console.log(\"material: \" + material);\n    console.log(\"consumption: \" + consumption);\n    let remainingOutput = this.getOutput().amount;\n\n    if (consumption >= this.getOutput().amount) {\n      //if consumption > output, split evenly\n      let split = Math.round(this.getOutput().amount / children.length);\n\n      for (let child of children) {\n        child.addInput(material, Math.min(split + child.getInputAmount(material), child.getMaxInputAmount(material)));\n      }\n    } else {\n      //split so that each child gets their max input\n      for (let child of children) {\n        child.addInput(material, child.getMaxInputAmount(material));\n      }\n    }\n  }\n\n  splitOutput(material, amount, children) {\n    let countAtMax = 0; //if at full capacity don't count in the split\n\n    for (let child of children) {\n      if (child.getInputAmount(material) === child.getMaxInputAmount(material)) {\n        countAtMax += 1;\n      }\n    }\n\n    let split = Math.round(amount / (children.length - countAtMax));\n\n    for (let child of children) {\n      child.addInput(material, Math.min(split + child.getInputAmount(material), child.getMaxInputAmount(material)));\n      amount -= Math.min(split + child.getInputAmount(material), child.getMaxInputAmount(material));\n    }\n\n    if (amount > 0) {\n      this.splitOutput(material, amount, children);\n    }\n  }\n\n  addChild(_child) {\n    //sets a child node and adds parent\n    this.children.push(_child);\n  }\n\n  removeChild(_child) {\n    for (let child of this.getChildren()) {\n      if (_child === child) {\n        this.children = this.getChildren().filter(c => {\n          return c !== _child;\n        });\n      }\n    }\n  }\n\n  wipeInput() {\n    this.input = [];\n  }\n\n  wipeInputOutput() {\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n  wipeChildrenInput() {\n    for (let child of this.children) {\n      child.wipeInput();\n    }\n  }\n\n  wipeChildren() {\n    this.children = [];\n  }\n\n  wipeAll() {\n    this.children = [];\n    this.maxInput = [];\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/backend/machineNode.js"],"names":["MachineNode","constructor","_name","_input1","_input2","_input3","_input4","_output","name","children","input1","input2","input3","input4","output","getOutput","getChildren","getInput1","getInput2","getInput3","getInput4","getInput","getAvailableInput","material","getInputMax","getInputAmount","addInput","_amount","input","push","amount","addOutput","length","max","sendOutput","effected","prevConsumption","consumption","child","console","log","remainingOutput","split","Math","round","min","getMaxInputAmount","splitOutput","countAtMax","addChild","_child","removeChild","filter","c","wipeInput","wipeInputOutput","wipeChildrenInput","wipeChildren","wipeAll","maxInput"],"mappings":"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","sourcesContent":["export default class MachineNode {\r\n    constructor(_name, _input1, _input2, _input3, _input4, _output) {\r\n        this.name = _name;\r\n        this.children = [];\r\n        this.input1 = _input1; // {name:, amount:, max: }\r\n        this.input2 = _input2;\r\n        this.input3 = _input3;\r\n        this.input4 = _input4;\r\n        //this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = _output;\r\n        // this.width;\r\n        // this.height;\r\n        // this.cost = [];\r\n    }\r\n\r\n    getOutput() {\r\n        return (this.output)\r\n    }\r\n\r\n    getChildren() {\r\n        return (this.children)\r\n    }\r\n\r\n    getInput1() {\r\n        return (this.input1)\r\n    }\r\n\r\n    getInput2() {\r\n        return (this.input2)\r\n    }\r\n\r\n    getInput3() {\r\n        return (this.input3)\r\n    }\r\n\r\n    getInput4() {\r\n        return (this.input4)\r\n    }\r\n\r\n    getInput() {\r\n        return([\r\n            this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()\r\n        ])\r\n    }\r\n\r\n    getAvailableInput(material) {\r\n        return(this.getInputMax(material) - this.getInputAmount(material))\r\n    }\r\n\r\n    addInput(_name, _amount) {\r\n        this.input.push({\r\n            name: _name, \r\n            amount: _amount\r\n        })\r\n    }\r\n\r\n    addOutput(_name, _amount) {\r\n        this.output = {\r\n            name: _name,\r\n            amount: _amount\r\n        }\r\n    }\r\n\r\n    getInputAmount(material) {\r\n        if(this.getInput().length < 1) { return(0) }\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return (input.amount) }\r\n            else { return (-1) }\r\n        }\r\n    }\r\n\r\n    getInputMax(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return(input.max) } \r\n        }\r\n        return(-1)\r\n    }\r\n\r\n\r\n    // edit this so that it correctly splits the output \r\n    // and records how much of what is sent to which child\r\n    sendOutput() { \r\n        let material = this.getOutput().name\r\n        let children = this.getChildren()\r\n        let effected = [];\r\n        let prevConsumption = 0;\r\n        let consumption = 0; //total amount of output consumed by children\r\n\r\n        for (let child of children) { \r\n            consumption += child.getAvailableInput(material)\r\n        }\r\n\r\n        console.log(\"material: \" + material)\r\n        console.log(\"consumption: \" + consumption)\r\n\r\n        let remainingOutput = this.getOutput().amount\r\n        if (consumption >= this.getOutput().amount) { //if consumption > output, split evenly\r\n            let split = Math.round(this.getOutput().amount / children.length)\r\n            for (let child of children) {\r\n                child.addInput(\r\n                    material, \r\n                    Math.min(split+child.getInputAmount(material), child.getMaxInputAmount(material))\r\n                )\r\n            }\r\n        } \r\n        \r\n        else { //split so that each child gets their max input\r\n            for (let child of children) {\r\n                child.addInput(material, child.getMaxInputAmount(material))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    splitOutput(material, amount, children) {\r\n        let countAtMax = 0;\r\n        //if at full capacity don't count in the split\r\n        for(let child of children) {\r\n            if(child.getInputAmount(material) === child.getMaxInputAmount(material)) { countAtMax += 1 }\r\n        }\r\n\r\n        let split = Math.round(amount / (children.length - countAtMax) )\r\n\r\n        for (let child of children) {\r\n            child.addInput(\r\n                material, \r\n                Math.min(split+child.getInputAmount(material), child.getMaxInputAmount(material))\r\n            )\r\n            amount -= Math.min(split+child.getInputAmount(material), child.getMaxInputAmount(material))\r\n        }\r\n\r\n        if(amount > 0) {\r\n            this.splitOutput(material, amount, children)\r\n        }\r\n    }\r\n\r\n    addChild(_child) { //sets a child node and adds parent\r\n        this.children.push(_child);\r\n    }\r\n    \r\n    removeChild(_child) {\r\n        for (let child of this.getChildren()) {\r\n            if (_child === child) {\r\n                this.children = this.getChildren().filter( (c) => {\r\n                    return (c !== _child)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    wipeInput() {\r\n        this.input = [];\r\n    }\r\n\r\n    wipeInputOutput() {\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n    wipeChildrenInput() {\r\n        for(let child of this.children) {\r\n            child.wipeInput()\r\n        }\r\n    }\r\n\r\n    wipeChildren() {\r\n        this.children = [];\r\n    }\r\n\r\n    wipeAll() {\r\n        this.children = [];\r\n        this.maxInput = [];\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}