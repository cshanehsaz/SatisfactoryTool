{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\cshan\\\\Box Sync\\\\website\\\\satisfactory2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\cshan\\\\Box Sync\\\\website\\\\satisfactory2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar MachineNode =\n/*#__PURE__*/\nfunction () {\n  function MachineNode(_name) {\n    _classCallCheck(this, MachineNode);\n\n    this.name = _name;\n    this.parents = [];\n    this.children = [];\n    this.maxInput = [];\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = []; // this.width;\n    // this.height;\n    // this.cost = [];\n  }\n\n  _createClass(MachineNode, [{\n    key: \"getInput\",\n    value: function getInput() {\n      return this.state.input;\n    }\n  }, {\n    key: \"getParents\",\n    value: function getParents() {\n      return this.state.parents;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this.state.children;\n    }\n  }, {\n    key: \"receiveInput\",\n    value: function receiveInput(_input) {\n      this.setState({\n        input: this.state.input.push(_input)\n      });\n    }\n  }, {\n    key: \"sendOutput\",\n    value: function sendOutput(children) {\n      //edit this so that it correctly splits the output\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child = _step.value;\n          child.receiveInput(this.state.output);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(childNode) {\n      //sets a child node and adds parent\n      this.children.push(childNode);\n      childNode.addParent(this);\n    }\n  }, {\n    key: \"addParent\",\n    value: function addParent(parentNode) {\n      //adds a parent node\n      this.parents.push(parentNode);\n    }\n  }]);\n\n  return MachineNode;\n}();\n\nexport default MachineNode;","map":{"version":3,"sources":["C:\\Users\\cshan\\Box Sync\\website\\satisfactory2\\src\\backend\\machineNode.js"],"names":["MachineNode","_name","name","parents","children","maxInput","input","output","state","_input","setState","push","child","receiveInput","childNode","addParent","parentNode"],"mappings":";;;IAAMA,W;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AACf,SAAKC,IAAL,GAAYD,KAAZ;AACA,SAAKE,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,KAAL,GAAa,EAAb,CALe,CAKE;;AACjB,SAAKC,MAAL,GAAc,EAAd,CANe,CAOf;AACA;AACA;AACH;;;;+BAEU;AACP,aAAQ,KAAKC,KAAL,CAAWF,KAAnB;AACH;;;iCAEY;AACT,aAAQ,KAAKE,KAAL,CAAWL,OAAnB;AACH;;;kCAEa;AACV,aAAQ,KAAKK,KAAL,CAAWJ,QAAnB;AACH;;;iCAEYK,M,EAAQ;AACjB,WAAKC,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWF,KAAX,CAAiBK,IAAjB,CAAsBF,MAAtB;AAAR,OAAd;AACH;;;+BAEUL,Q,EAAU;AAAE;AAAF;AAAA;AAAA;;AAAA;AACjB,6BAAkBA,QAAlB,8HAA4B;AAAA,cAAnBQ,KAAmB;AACxBA,UAAAA,KAAK,CAACC,YAAN,CAAmB,KAAKL,KAAL,CAAWD,MAA9B;AACH;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpB;;;6BAEQO,S,EAAW;AAAE;AAClB,WAAKV,QAAL,CAAcO,IAAd,CAAmBG,SAAnB;AACAA,MAAAA,SAAS,CAACC,SAAV,CAAoB,IAApB;AACH;;;8BAESC,U,EAAY;AAAE;AACpB,WAAKb,OAAL,CAAaQ,IAAb,CAAkBK,UAAlB;AACH;;;;;;AAKL,eAAehB,WAAf","sourcesContent":["class MachineNode {\r\n    constructor(_name) {\r\n        this.name = _name;\r\n        this.parents = [];\r\n        this.children = [];\r\n        this.maxInput = [];\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = [];\r\n        // this.width;\r\n        // this.height;\r\n        // this.cost = [];\r\n    }\r\n\r\n    getInput() {\r\n        return (this.state.input)\r\n    }\r\n\r\n    getParents() {\r\n        return (this.state.parents)\r\n    }\r\n\r\n    getChildren() {\r\n        return (this.state.children)\r\n    }\r\n\r\n    receiveInput(_input) {\r\n        this.setState({input: this.state.input.push(_input)})\r\n    }\r\n\r\n    sendOutput(children) { //edit this so that it correctly splits the output\r\n        for (let child of children) {\r\n            child.receiveInput(this.state.output)\r\n        }\r\n    }\r\n\r\n    addChild(childNode) { //sets a child node and adds parent\r\n        this.children.push(childNode);\r\n        childNode.addParent(this);\r\n    }   \r\n\r\n    addParent(parentNode) { //adds a parent node\r\n        this.parents.push(parentNode);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default MachineNode;"]},"metadata":{},"sourceType":"module"}