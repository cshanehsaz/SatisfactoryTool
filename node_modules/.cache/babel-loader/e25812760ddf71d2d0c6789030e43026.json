{"ast":null,"code":"export default class MachineNode {\n  constructor(_name, _input1, _input2, _input3, _input4, _output) {\n    this.name = _name;\n    this.children = [];\n    this.input1 = _input1; // {name:, amount:, max: }\n\n    this.input2 = _input2;\n    this.input3 = _input3;\n    this.input4 = _input4;\n    this.output = _output; // this.width;\n    // this.height;\n    // this.cost = [];\n  }\n\n  getOutput() {\n    return this.output;\n  }\n\n  getChildren() {\n    return this.children;\n  }\n\n  getInput1() {\n    return this.input1;\n  }\n\n  getInput2() {\n    return this.input2;\n  }\n\n  getInput3() {\n    return this.input3;\n  }\n\n  getInput4() {\n    return this.input4;\n  }\n\n  getInput() {\n    return [this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()];\n  }\n\n  getAvailableInput(material) {\n    return this.getInputMax(material) - this.getInputAmount(material);\n  }\n\n  addInput(material, _amount) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        input.amount = Math.min(input.amount + _amount, this.getInputMax(material));\n        return input.amount;\n      }\n    }\n  }\n\n  removeInput(material, amount) {\n    for (let input of this.getInput()) {\n      console.log(\"input name: \" + input.name);\n      console.log(\"material: \" + material);\n\n      if (input.name === material) {\n        console.log('before2: ' + input.amount);\n        input.amount = Math.max(input.amount - amount, 0);\n        console.log('after2: ' + input.amount);\n        return input.amount;\n      }\n    }\n  }\n\n  addOutput(_name, _amount) {\n    this.output = {\n      name: _name,\n      amount: _amount\n    };\n  }\n\n  getInputAmount(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.amount;\n      }\n    }\n\n    return 0;\n  }\n\n  getInputMax(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.max;\n      }\n    }\n\n    return 0;\n  } // edit this so that it correctly splits the output \n  // and records how much of what is sent to which child\n\n\n  sendOutput() {\n    let material = this.getOutput().name;\n    let children = this.getChildren();\n    let effected = [];\n    let prevConsumption = 0;\n    let consumption = 0; //total amount of output consumed by children\n\n    for (let child of children) {\n      consumption += child.getAvailableInput(material);\n    }\n\n    console.log(\"material: \" + material);\n    console.log(\"consumption: \" + consumption);\n    this.splitOutput(this.getOutput(), children); // let remainingOutput = this.getOutput().amount\n    // if (consumption >= this.getOutput().amount) { //if consumption > output, split evenly\n    //     let split = Math.round(this.getOutput().amount / children.length)\n    //     for (let child of children) {\n    //         child.addInput(\n    //             material, \n    //             Math.min(split + child.getInputAmount(material), child.getInputMax(material))\n    //         )\n    //     }\n    // } \n    // else { //split so that each child gets their max input\n    //     for (let child of children) {\n    //         child.addInput(material, child.getInputMax(material))\n    //     }\n    // }\n  }\n\n  wipeOutputToChildren(output, children) {\n    console.log(\"wipe kids: \" + output.name);\n\n    if (children.length <= 0) {\n      return;\n    }\n\n    let split = Math.round(output.amount / children.length);\n\n    for (let child of children) {\n      console.log('before: ' + child.getInputAmount(output.name));\n      child.removeInput(output.name, split);\n      console.log('after: ' + child.getInputAmount(output.name));\n    }\n  }\n\n  splitOutput(output, children) {\n    let material = output.name;\n    let amount = output.amount;\n    this.wipeOutputToChildren(output, children);\n    let countAtMax = 0; //if at full capacity don't count in the split\n\n    for (let child of children) {\n      if (child.getInputAmount(material) === child.getInputMax(material)) {\n        countAtMax += 1;\n      }\n    }\n\n    let split = Math.round(amount / (children.length - countAtMax));\n\n    for (let child of children) {\n      child.addInput(material, split);\n      amount -= split;\n    }\n\n    if (amount > 0) {\n      this.splitOutput(material, amount, children);\n    }\n  }\n\n  addChild(_child) {\n    //sets a child node and adds parent\n    this.children.push(_child);\n  }\n\n  removeChild(_child) {\n    for (let child of this.getChildren()) {\n      if (_child === child) {\n        this.children = this.getChildren().filter(c => {\n          return c !== _child;\n        });\n      }\n    }\n  }\n\n  wipeInput() {\n    this.input = [];\n  }\n\n  wipeInputOutput() {\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n  wipeChildrenInput() {\n    for (let child of this.children) {\n      child.wipeInput();\n    }\n  }\n\n  wipeChildren() {\n    this.children = [];\n  }\n\n  wipeAll() {\n    this.children = [];\n    this.maxInput = [];\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/backend/machineNode.js"],"names":["MachineNode","constructor","_name","_input1","_input2","_input3","_input4","_output","name","children","input1","input2","input3","input4","output","getOutput","getChildren","getInput1","getInput2","getInput3","getInput4","getInput","getAvailableInput","material","getInputMax","getInputAmount","addInput","_amount","input","amount","Math","min","removeInput","console","log","max","addOutput","sendOutput","effected","prevConsumption","consumption","child","splitOutput","wipeOutputToChildren","length","split","round","countAtMax","addChild","_child","push","removeChild","filter","c","wipeInput","wipeInputOutput","wipeChildrenInput","wipeChildren","wipeAll","maxInput"],"mappings":"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","sourcesContent":["export default class MachineNode {\r\n    constructor(_name, _input1, _input2, _input3, _input4, _output) {\r\n        this.name = _name;\r\n        this.children = [];\r\n        this.input1 = _input1; // {name:, amount:, max: }\r\n        this.input2 = _input2;\r\n        this.input3 = _input3;\r\n        this.input4 = _input4;\r\n        this.output = _output;\r\n        // this.width;\r\n        // this.height;\r\n        // this.cost = [];\r\n    }\r\n\r\n    getOutput() {\r\n        return (this.output)\r\n    }\r\n\r\n    getChildren() {\r\n        return (this.children)\r\n    }\r\n\r\n    getInput1() {\r\n        return (this.input1)\r\n    }\r\n\r\n    getInput2() {\r\n        return (this.input2)\r\n    }\r\n\r\n    getInput3() {\r\n        return (this.input3)\r\n    }\r\n\r\n    getInput4() {\r\n        return (this.input4)\r\n    }\r\n\r\n    getInput() {\r\n        return([\r\n            this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()\r\n        ])\r\n    }\r\n\r\n    getAvailableInput(material) {\r\n        return(this.getInputMax(material) - this.getInputAmount(material))\r\n    }\r\n\r\n    addInput(material, _amount) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) {\r\n                input.amount = Math.min(input.amount + _amount, this.getInputMax(material))\r\n                return(input.amount)\r\n            }\r\n        }\r\n    }\r\n\r\n    removeInput(material, amount) {\r\n        for (let input of this.getInput()) {\r\n            console.log(\"input name: \" + input.name)\r\n            console.log(\"material: \" + material)\r\n            if(input.name === material) {\r\n                console.log('before2: ' + input.amount)\r\n                input.amount = Math.max(input.amount - amount, 0)\r\n                console.log('after2: ' + input.amount)\r\n                return(input.amount)\r\n            }\r\n        }\r\n    }\r\n\r\n    addOutput(_name, _amount) {\r\n        this.output = {\r\n            name: _name,\r\n            amount: _amount\r\n        }\r\n    }\r\n\r\n    getInputAmount(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return (input.amount) }\r\n        }\r\n        return(0)\r\n    }\r\n\r\n    getInputMax(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return(input.max) } \r\n        }\r\n        return(0)\r\n    }\r\n\r\n\r\n    // edit this so that it correctly splits the output \r\n    // and records how much of what is sent to which child\r\n    sendOutput() { \r\n        let material = this.getOutput().name\r\n        let children = this.getChildren()\r\n        let effected = [];\r\n        let prevConsumption = 0;\r\n        let consumption = 0; //total amount of output consumed by children\r\n\r\n        for (let child of children) { \r\n            consumption += child.getAvailableInput(material)\r\n        }\r\n\r\n        console.log(\"material: \" + material)\r\n        console.log(\"consumption: \" + consumption)\r\n\r\n        this.splitOutput(this.getOutput(), children)\r\n\r\n        // let remainingOutput = this.getOutput().amount\r\n        // if (consumption >= this.getOutput().amount) { //if consumption > output, split evenly\r\n        //     let split = Math.round(this.getOutput().amount / children.length)\r\n        //     for (let child of children) {\r\n        //         child.addInput(\r\n        //             material, \r\n        //             Math.min(split + child.getInputAmount(material), child.getInputMax(material))\r\n        //         )\r\n        //     }\r\n        // } \r\n        \r\n        // else { //split so that each child gets their max input\r\n        //     for (let child of children) {\r\n        //         child.addInput(material, child.getInputMax(material))\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    wipeOutputToChildren(output, children) {\r\n        console.log(\"wipe kids: \" + output.name)\r\n        if(children.length <= 0){ return }\r\n        let split = Math.round( output.amount / children.length)\r\n        for (let child of children) {\r\n            console.log('before: ' + child.getInputAmount(output.name))\r\n            child.removeInput(output.name, split)\r\n            console.log('after: ' + child.getInputAmount(output.name))\r\n        }\r\n    }\r\n\r\n    splitOutput(output, children) {\r\n        let material = output.name\r\n        let amount = output.amount\r\n        this.wipeOutputToChildren(output, children)\r\n        let countAtMax = 0;\r\n\r\n        //if at full capacity don't count in the split\r\n        for(let child of children) {\r\n            if(child.getInputAmount(material) === child.getInputMax(material)) { countAtMax += 1 }\r\n        }\r\n\r\n        let split = Math.round(amount / (children.length - countAtMax) )\r\n\r\n        for (let child of children) {\r\n            child.addInput(\r\n                material, \r\n                split\r\n            )\r\n            amount -= split\r\n        }\r\n\r\n        if(amount > 0) {\r\n            this.splitOutput(material, amount, children)\r\n        }\r\n    }\r\n\r\n    addChild(_child) { //sets a child node and adds parent\r\n        this.children.push(_child);\r\n    }\r\n    \r\n    removeChild(_child) {\r\n        for (let child of this.getChildren()) {\r\n            if (_child === child) {\r\n                this.children = this.getChildren().filter( (c) => {\r\n                    return (c !== _child)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    wipeInput() {\r\n        this.input = [];\r\n    }\r\n\r\n    wipeInputOutput() {\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n    wipeChildrenInput() {\r\n        for(let child of this.children) {\r\n            child.wipeInput()\r\n        }\r\n    }\r\n\r\n    wipeChildren() {\r\n        this.children = [];\r\n    }\r\n\r\n    wipeAll() {\r\n        this.children = [];\r\n        this.maxInput = [];\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}