{"ast":null,"code":"export default class MachineNode {\n  constructor(_name, _input1, _input2, _input3, _input4, _output) {\n    this.name = _name;\n    this.children = [];\n    this.input1 = _input1; // {name:, amount:, max: }\n\n    this.input2 = _input2;\n    this.input3 = _input3;\n    this.input4 = _input4;\n    this.output = _output; // this.width;\n    // this.height;\n    // this.cost = [];\n  }\n\n  getOutput() {\n    return this.output;\n  }\n\n  getChildren() {\n    return this.children;\n  }\n\n  getInput1() {\n    return this.input1;\n  }\n\n  getInput2() {\n    return this.input2;\n  }\n\n  getInput3() {\n    return this.input3;\n  }\n\n  getInput4() {\n    return this.input4;\n  }\n\n  getInput() {\n    return [this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()];\n  }\n\n  getAvailableInput(material) {\n    return this.getInputMax(material) - this.getInputAmount(material);\n  }\n\n  addInput(material, amount) {\n    console.log(this.getInput());\n\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        input.amount = input.amount + amount; //Math.min(input.amount + _amount, this.getInputMax(material))\n\n        return input.amount;\n      }\n    }\n  }\n\n  setInput(material, amount) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        input.amount = amount;\n        return input;\n      }\n    }\n\n    return -1;\n  }\n\n  removeInput(material, amount) {\n    for (let input of this.getInput()) {\n      console.log(\"input name: \" + input.name);\n      console.log(\"material: \" + material);\n\n      if (input.name === material) {\n        console.log('before2: ' + input.amount);\n        input.amount = Math.max(input.amount - amount, 0);\n        console.log('after2: ' + input.amount);\n        return input.amount;\n      }\n    }\n  }\n\n  addOutput(_name, _amount) {\n    this.output = {\n      name: _name,\n      amount: _amount\n    };\n  }\n\n  getInputAmount(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.amount;\n      }\n    }\n\n    return 0;\n  }\n\n  checkInput(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getInputMax(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.max;\n      }\n    }\n\n    return 0;\n  } // edit this so that it correctly splits the output \n  // and records how much of what is sent to which child\n\n\n  sendOutput() {\n    let material = this.getOutput().name;\n    let allChildren = this.getChildren();\n    let children = [];\n\n    for (let child of allChildren) {\n      if (child.checkInput(material)) {\n        children.push(child);\n      }\n    }\n\n    let numChildren = children.length;\n    let split = this.getOutput().amount / numChildren;\n\n    for (let child of children) {\n      child.setInput(material, split);\n    }\n\n    MachineNode.evenOutputSplit(children, material);\n  }\n\n  static evenOutputSplit(children, material) {\n    if (children.length <= 1) {\n      return;\n    }\n\n    console.log(children);\n    let i = 0;\n    let countGood = 0;\n    let childrenToUpdate = [];\n\n    while (true) {\n      //make all children even split and not above max\n      let diff = children[i].getAvailableInput(material);\n      let nextChild = i + 1 >= children.length ? 0 : i + 1;\n\n      if (diff <= 0) {\n        children[i].setInput(material, children[i].getInputAmount(material) - 1);\n        children[nextChild].setInput(material, children[nextChild].getInputAmount(material) + 1);\n        countGood = 0;\n      } else {\n        countGood++;\n      }\n\n      i++;\n\n      if (countGood === children.length) {\n        break;\n      }\n    }\n\n    let total = 0;\n\n    for (let child of childrenToUpdate) {\n      total += child.getInputAmount(material);\n    }\n\n    for (let child of childrenToUpdate) {\n      child.setInput(material, total / childrenToUpdate.length());\n    }\n  } // sendOutput() { \n  //     let material = this.getOutput().name\n  //     let children = this.getChildren()\n  //     let effected = [];\n  //     let prevConsumption = 0;\n  //     let consumption = 0; //total amount of output consumed by children\n  //     for (let child of children) { \n  //         consumption += child.getAvailableInput(material)\n  //     }\n  //     console.log(\"material: \" + material)\n  //     console.log(\"consumption: \" + consumption)\n  //     this.splitOutput(this.getOutput(), children)\n  // }\n\n\n  wipeOutputToChildren(output, children) {\n    if (children.length <= 1) {\n      return;\n    }\n\n    console.log('wiped');\n    let split = Math.round(output.amount / Math.max(children.length, 1));\n\n    for (let child of children) {\n      child.removeInput(output.name, split);\n    }\n  }\n\n  splitOutput(output, children) {\n    let material = output.name;\n    let amount = output.amount;\n    this.wipeOutputToChildren(output, children);\n    let countAtMax = 0; //if at full capacity don't count in the split\n\n    for (let child of children) {\n      if (child.getInputAmount(material) === child.getInputMax(material)) {\n        countAtMax += 1;\n      }\n    }\n\n    let split = Math.round(amount / (children.length - countAtMax));\n\n    for (let child of children) {\n      child.addInput(material, split);\n      amount -= split;\n    }\n\n    if (amount > 0) {\n      this.splitOutput(material, amount, children);\n    }\n  }\n\n  addChild(_child) {\n    //sets a child node and adds parent\n    this.children.push(_child);\n  }\n\n  removeChild(_child) {\n    for (let child of this.getChildren()) {\n      if (_child === child) {\n        this.children = this.getChildren().filter(c => {\n          return c !== _child;\n        });\n      }\n    }\n  }\n\n  wipeInput() {\n    this.input = [];\n  }\n\n  wipeInputOutput() {\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n  wipeChildrenInput() {\n    for (let child of this.children) {\n      child.wipeInput();\n    }\n  }\n\n  wipeChildren() {\n    this.children = [];\n  }\n\n  wipeAll() {\n    this.children = [];\n    this.maxInput = [];\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/backend/machineNode.js"],"names":["MachineNode","constructor","_name","_input1","_input2","_input3","_input4","_output","name","children","input1","input2","input3","input4","output","getOutput","getChildren","getInput1","getInput2","getInput3","getInput4","getInput","getAvailableInput","material","getInputMax","getInputAmount","addInput","amount","console","log","input","setInput","removeInput","Math","max","addOutput","_amount","checkInput","sendOutput","allChildren","child","push","numChildren","length","split","evenOutputSplit","i","countGood","childrenToUpdate","diff","nextChild","total","wipeOutputToChildren","round","splitOutput","countAtMax","addChild","_child","removeChild","filter","c","wipeInput","wipeInputOutput","wipeChildrenInput","wipeChildren","wipeAll","maxInput"],"mappings":"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","sourcesContent":["export default class MachineNode {\r\n    constructor(_name, _input1, _input2, _input3, _input4, _output) {\r\n        this.name = _name;\r\n        this.children = [];\r\n        this.input1 = _input1; // {name:, amount:, max: }\r\n        this.input2 = _input2;\r\n        this.input3 = _input3;\r\n        this.input4 = _input4;\r\n        this.output = _output;\r\n        // this.width;\r\n        // this.height;\r\n        // this.cost = [];\r\n    }\r\n\r\n    getOutput() {\r\n        return (this.output)\r\n    }\r\n\r\n    getChildren() {\r\n        return (this.children)\r\n    }\r\n\r\n    getInput1() {\r\n        return (this.input1)\r\n    }\r\n\r\n    getInput2() {\r\n        return (this.input2)\r\n    }\r\n\r\n    getInput3() {\r\n        return (this.input3)\r\n    }\r\n\r\n    getInput4() {\r\n        return (this.input4)\r\n    }\r\n\r\n    getInput() {\r\n        return([\r\n            this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()\r\n        ])\r\n    }\r\n\r\n    getAvailableInput(material) {\r\n        return(this.getInputMax(material) - this.getInputAmount(material))\r\n    }\r\n\r\n    addInput(material, amount) {\r\n        console.log(this.getInput())\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) {\r\n                input.amount = input.amount + amount//Math.min(input.amount + _amount, this.getInputMax(material))\r\n                return(input.amount)\r\n            }\r\n        }\r\n    }\r\n\r\n    setInput(material, amount) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) {\r\n                input.amount = amount;\r\n                return (input)\r\n            }\r\n        }\r\n        return (-1)\r\n    }\r\n\r\n    removeInput(material, amount) {\r\n        for (let input of this.getInput()) {\r\n            console.log(\"input name: \" + input.name)\r\n            console.log(\"material: \" + material)\r\n            if(input.name === material) {\r\n                console.log('before2: ' + input.amount)\r\n                input.amount = Math.max(input.amount - amount, 0)\r\n                console.log('after2: ' + input.amount)\r\n                return(input.amount)\r\n            }\r\n        }\r\n    }\r\n\r\n    addOutput(_name, _amount) {\r\n        this.output = {\r\n            name: _name,\r\n            amount: _amount\r\n        }\r\n    }\r\n\r\n    getInputAmount(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return (input.amount) }\r\n        }\r\n        return(0)\r\n    }\r\n\r\n    checkInput(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return (true) }\r\n        }\r\n        return (false)\r\n    }\r\n\r\n    getInputMax(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return(input.max) } \r\n        }\r\n        return(0)\r\n    }\r\n\r\n\r\n    // edit this so that it correctly splits the output \r\n    // and records how much of what is sent to which child\r\n\r\n    sendOutput() {\r\n        let material = this.getOutput().name;\r\n        let allChildren = this.getChildren();\r\n        let children = [];\r\n\r\n        for(let child of allChildren) {\r\n            if( child.checkInput(material) ) { children.push(child) }\r\n        }\r\n\r\n        let numChildren = children.length\r\n        let split = this.getOutput().amount / numChildren\r\n        \r\n        for (let child of children) {\r\n            child.setInput(material, split)\r\n        }\r\n\r\n        MachineNode.evenOutputSplit(children, material)\r\n    }\r\n\r\n    static evenOutputSplit(children, material) {\r\n        if(children.length <= 1){return}\r\n        console.log(children)\r\n\r\n        let i = 0;\r\n        let countGood = 0;\r\n        let childrenToUpdate = [];\r\n        while(true) { //make all children even split and not above max\r\n            let diff = children[i].getAvailableInput(material)\r\n            let nextChild = ( i+1 >= children.length ) ? 0 : i+1\r\n\r\n            if(diff <= 0) {\r\n                children[i].setInput( material, children[i].getInputAmount(material) - 1 )\r\n                children[nextChild].setInput (material, children[nextChild].getInputAmount(material) + 1 )\r\n                countGood = 0;\r\n            } else {\r\n                countGood++\r\n            }\r\n            i++;\r\n\r\n            if (countGood === children.length) { break }\r\n        }\r\n\r\n        let total = 0;\r\n        for (let child of childrenToUpdate) {\r\n            total += child.getInputAmount(material)\r\n        }\r\n        for (let child of childrenToUpdate) {\r\n            child.setInput(material, total / childrenToUpdate.length())\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // sendOutput() { \r\n    //     let material = this.getOutput().name\r\n    //     let children = this.getChildren()\r\n    //     let effected = [];\r\n    //     let prevConsumption = 0;\r\n    //     let consumption = 0; //total amount of output consumed by children\r\n\r\n    //     for (let child of children) { \r\n    //         consumption += child.getAvailableInput(material)\r\n    //     }\r\n\r\n    //     console.log(\"material: \" + material)\r\n    //     console.log(\"consumption: \" + consumption)\r\n\r\n    //     this.splitOutput(this.getOutput(), children)\r\n    // }\r\n\r\n    wipeOutputToChildren(output, children) {\r\n        if(children.length <= 1){ return }\r\n        console.log('wiped')\r\n        let split = Math.round( output.amount / Math.max( children.length, 1 ) )\r\n        for (let child of children) {\r\n            child.removeInput(output.name, split)\r\n        }\r\n    }\r\n\r\n    splitOutput(output, children) {\r\n        let material = output.name\r\n        let amount = output.amount\r\n        this.wipeOutputToChildren(output, children)\r\n        let countAtMax = 0;\r\n\r\n        //if at full capacity don't count in the split\r\n        for(let child of children) {\r\n            if(child.getInputAmount(material) === child.getInputMax(material)) { countAtMax += 1 }\r\n        }\r\n\r\n        let split = Math.round(amount / (children.length - countAtMax) )\r\n\r\n        for (let child of children) {\r\n            child.addInput(\r\n                material,\r\n                split\r\n            )\r\n            amount -= split\r\n        }\r\n\r\n        if(amount > 0) {\r\n            this.splitOutput(material, amount, children)\r\n        }\r\n    }\r\n\r\n    addChild(_child) { //sets a child node and adds parent\r\n        this.children.push(_child);\r\n    }\r\n    \r\n    removeChild(_child) {\r\n        for (let child of this.getChildren()) {\r\n            if (_child === child) {\r\n                this.children = this.getChildren().filter( (c) => {\r\n                    return (c !== _child)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    wipeInput() {\r\n        this.input = [];\r\n    }\r\n\r\n    wipeInputOutput() {\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n    wipeChildrenInput() {\r\n        for(let child of this.children) {\r\n            child.wipeInput()\r\n        }\r\n    }\r\n\r\n    wipeChildren() {\r\n        this.children = [];\r\n    }\r\n\r\n    wipeAll() {\r\n        this.children = [];\r\n        this.maxInput = [];\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}