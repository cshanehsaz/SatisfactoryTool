{"ast":null,"code":"export default class MachineNode {\n  constructor(_name, _maxInput1, _maxInput2, _maxInput3, _maxInput4, _output) {\n    this.name = _name;\n    this.children = [];\n    this.maxInput1 = _maxInput1;\n    this.maxInput2 = _maxInput2;\n    this.maxInput3 = _maxInput3;\n    this.maxInput4 = _maxInput4;\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = _output; // this.width;\n    // this.height;\n    // this.cost = [];\n  }\n\n  getInput() {\n    return this.input;\n  }\n\n  getOutput() {\n    return this.output;\n  }\n\n  getChildren() {\n    return this.children;\n  }\n\n  getMaxInput1() {\n    return this.maxInput1;\n  }\n\n  getMaxInput2() {\n    return this.maxInput2;\n  }\n\n  getMaxInput3() {\n    return this.maxInput3;\n  }\n\n  getMaxInput4() {\n    return this.maxInput4;\n  }\n\n  addInput(_name, _amount) {\n    this.input.push({\n      name: _name,\n      amount: _amount\n    });\n  } //needs to be updated\n\n\n  addMaxInput(_name, _amount) {\n    this.maxInput.push({\n      name: _name,\n      amount: _amount\n    });\n  }\n\n  addOutput(_name, _amount) {\n    this.output = {\n      name: _name,\n      amount: _amount\n    };\n  }\n\n  getInputAmount(material) {\n    if (this.getInput().length < 1) {\n      return 0;\n    }\n\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.amount;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  getMaxInputAmount(material) {\n    for (let input of this.getMaxInput()) {\n      if (input.name === material) {\n        return input.amount;\n      } else {\n        return 0;\n      }\n    }\n  } // edit this so that it correctly splits the output \n  // and records how much of what is sent to which child\n\n\n  sendOutput() {\n    let children = this.getChildren();\n    let consumption = 0; //total amount of output consumed by children\n\n    let material = this.getOutput().name;\n\n    for (let child of children) {\n      consumption += child.getMaxInputAmount(material);\n    }\n\n    if (consumption >= this.getOutput().amount) {\n      //if consumption > output, split evenly\n      let split = Math.round(this.getOutput().amount / children.length);\n\n      for (let child of children) {\n        child.addInput(material, split);\n      }\n    } else {\n      //split so that each child gets their max input\n      for (let child of children) {\n        child.addInput(material, child.getMaxInputAmount(material));\n      }\n    }\n  }\n\n  addChild(_child) {\n    //sets a child node and adds parent\n    this.children.push(_child);\n  }\n\n  removeChild(_child) {\n    for (let child of this.getChildren()) {\n      if (_child === child) {\n        this.children = this.getChildren().filter(c => {\n          return c !== _child;\n        });\n      }\n    }\n  }\n\n  wipeInput() {\n    this.input = [];\n  }\n\n  wipeInputOutput() {\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n  wipeChildrenInput() {\n    for (let child of this.children) {\n      child.wipeInput();\n    }\n  }\n\n  wipeChildren() {\n    this.children = [];\n  }\n\n  wipeAll() {\n    this.children = [];\n    this.maxInput = [];\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/backend/machineNode.js"],"names":["MachineNode","constructor","_name","_maxInput1","_maxInput2","_maxInput3","_maxInput4","_output","name","children","maxInput1","maxInput2","maxInput3","maxInput4","input","output","getInput","getOutput","getChildren","getMaxInput1","getMaxInput2","getMaxInput3","getMaxInput4","addInput","_amount","push","amount","addMaxInput","maxInput","addOutput","getInputAmount","material","length","getMaxInputAmount","getMaxInput","sendOutput","consumption","child","split","Math","round","addChild","_child","removeChild","filter","c","wipeInput","wipeInputOutput","wipeChildrenInput","wipeChildren","wipeAll"],"mappings":"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","sourcesContent":["export default class MachineNode {\r\n    constructor(_name, _maxInput1, _maxInput2, _maxInput3, _maxInput4, _output) {\r\n        this.name = _name;\r\n        this.children = [];\r\n        this.maxInput1 = _maxInput1;\r\n        this.maxInput2 = _maxInput2;\r\n        this.maxInput3 = _maxInput3;\r\n        this.maxInput4 = _maxInput4;\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = _output;\r\n        // this.width;\r\n        // this.height;\r\n        // this.cost = [];\r\n    }\r\n\r\n    getInput() {\r\n        return (this.input)\r\n    }\r\n\r\n    getOutput() {\r\n        return (this.output)\r\n    }\r\n\r\n    getChildren() {\r\n        return (this.children)\r\n    }\r\n\r\n    getMaxInput1() {\r\n        return (this.maxInput1)\r\n    }\r\n\r\n    getMaxInput2() {\r\n        return (this.maxInput2)\r\n    }\r\n\r\n    getMaxInput3() {\r\n        return (this.maxInput3)\r\n    }\r\n\r\n    getMaxInput4() {\r\n        return (this.maxInput4)\r\n    }\r\n\r\n    addInput(_name, _amount) {\r\n        this.input.push({\r\n            name: _name, \r\n            amount: _amount\r\n        })\r\n    }\r\n\r\n    //needs to be updated\r\n    addMaxInput(_name, _amount) {\r\n        this.maxInput.push({\r\n            name: _name, \r\n            amount: _amount\r\n        })\r\n    }\r\n\r\n    addOutput(_name, _amount) {\r\n        this.output = {\r\n            name: _name,\r\n            amount: _amount\r\n        }\r\n    }\r\n\r\n    getInputAmount(material) {\r\n        if(this.getInput().length < 1) { return(0) }\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return (input.amount) }\r\n            else { return (0) }\r\n        }\r\n    }\r\n\r\n    getMaxInputAmount(material) {\r\n        for (let input of this.getMaxInput()) {\r\n            if(input.name === material) { return (input.amount) }\r\n            else { return (0) }\r\n        }\r\n    }\r\n\r\n\r\n    // edit this so that it correctly splits the output \r\n    // and records how much of what is sent to which child\r\n    sendOutput() { \r\n        let children = this.getChildren()\r\n        let consumption = 0; //total amount of output consumed by children\r\n        let material = this.getOutput().name\r\n\r\n        for (let child of children) {\r\n            consumption += child.getMaxInputAmount(material)\r\n        }\r\n\r\n        if (consumption >= this.getOutput().amount) { //if consumption > output, split evenly\r\n            let split = Math.round(this.getOutput().amount / children.length)\r\n            for (let child of children) {\r\n                child.addInput(material, split)\r\n            }\r\n        } \r\n        \r\n        else { //split so that each child gets their max input\r\n            for (let child of children) {\r\n                child.addInput(material, child.getMaxInputAmount(material))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    addChild(_child) { //sets a child node and adds parent\r\n        this.children.push(_child);\r\n    }\r\n    \r\n    removeChild(_child) {\r\n        for (let child of this.getChildren()) {\r\n            if (_child === child) {\r\n                this.children = this.getChildren().filter( (c) => {\r\n                    return (c !== _child)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    wipeInput() {\r\n        this.input = [];\r\n    }\r\n\r\n    wipeInputOutput() {\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n    wipeChildrenInput() {\r\n        for(let child of this.children) {\r\n            child.wipeInput()\r\n        }\r\n    }\r\n\r\n    wipeChildren() {\r\n        this.children = [];\r\n    }\r\n\r\n    wipeAll() {\r\n        this.children = [];\r\n        this.maxInput = [];\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}