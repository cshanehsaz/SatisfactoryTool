{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cshan\\\\Box Sync\\\\website\\\\satisfactory2\\\\src\\\\components\\\\canvas.js\";\nimport React from 'react';\nimport Machine from './machine.js';\nimport Conveyer from './conveyer.js';\nimport MachineCursor from './machineCursor.js';\nimport MachineName from './machineName.js';\nimport MachineNode from '../backend/machineNode.js';\nimport MachineOutput from './machineOutput.js';\nimport '../css/canvas.css';\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: 0,\n      y: 0,\n      nodes: [],\n      conveyers: [],\n      currentTarget: null,\n      selector: false\n    };\n  }\n\n  handleMachineClick(e) {\n    //conveyer connector tool\n    e.stopPropagation();\n    let _currentTarget = null;\n\n    if (!this.state.selector) {\n      for (let node of this.state.nodes) {\n        if (node.x === e.target.getAttribute(\"cx\") && node.y === e.target.getAttribute(\"cy\")) {\n          _currentTarget = node;\n          return;\n        }\n      }\n\n      this.setState({\n        currentTarget: _currentTarget,\n        selector: true\n      });\n    } else {\n      //creates a new conveyer\n      let _conveyers = this.state.conveyers;\n\n      _conveyers.push({\n        x1: this.state.currentTarget.x1,\n        y1: this.state.currentTarget.y1,\n        x2: e.target.getAttribute(\"cx\"),\n        y2: e.target.getAttribute(\"cy\")\n      });\n\n      this.setState({\n        conveyers: _conveyers,\n        currentTarget: {},\n        selector: false\n      });\n    }\n  }\n\n  _onMouseMove(e) {\n    let rect = e.target.getBoundingClientRect();\n    this.setState({\n      x: e.screenX - rect.x,\n      y: e.screenY - rect.y - rect.top + 50\n    }); //50 to fix the bugs with cursors\n  }\n\n  _onClick(e) {\n    //at some point make this so that it's not redrawing all of them every frame, just stamps somewhere more permanent instead\n    let _nodes = this.state.nodes;\n    this.fetchMachineData(this.props.tool, this.state.nodes);\n  }\n\n  fetchMachineData(name, _nodes) {\n    //fetch request for all of the data so that we ensure it's only done once and stored in state\n    fetch('http://localhost:6969/getmachinedata?name=' + name).then(res => res.json()).then(res => {\n      console.log('response');\n      console.log(res);\n\n      let _data = new MachineNode(res.data[0].name, res.data[0].maxInput1, res.data[0].maxInput2, res.data[0].maxInput3, res.data[0].maxInput4, res.data[0].output);\n\n      _nodes.push({\n        x: this.state.x,\n        y: this.state.y,\n        data: _data\n      });\n\n      console.log(_nodes);\n      this.setState({\n        nodes: _nodes\n      });\n    });\n  }\n\n  render() {\n    const {\n      x,\n      y\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseMove: this._onMouseMove.bind(this),\n      onClick: this._onClick.bind(this),\n      className: \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      width: \"100%\",\n      height: \"100%\",\n      className: this.state.selector ? \"canvas-selector\" : \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, this.state.nodes.map(node => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Machine, {\n      onClick: this.handleMachineClick.bind(this),\n      x: node.x,\n      y: node.y,\n      data: node.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(MachineOutput, {\n      x: node.x,\n      y: node.y,\n      data: node.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(MachineName, {\n      name: node.data.name,\n      x: node.x,\n      y: node.y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    }))), this.state.conveyers.map(conveyer => /*#__PURE__*/React.createElement(Conveyer, {\n      x1: conveyer.x1,\n      y1: conveyer.y1,\n      x2: conveyer.x2,\n      y2: conveyer.y2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(MachineCursor, {\n      x: x,\n      y: y,\n      onMouseMove: this._onMouseMove.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\nexport default Canvas; // this.state.selector ? {cursor: \"pointer\"} : {cursor: \"auto\"}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/components/canvas.js"],"names":["React","Machine","Conveyer","MachineCursor","MachineName","MachineNode","MachineOutput","Canvas","Component","constructor","props","state","x","y","nodes","conveyers","currentTarget","selector","handleMachineClick","e","stopPropagation","_currentTarget","node","target","getAttribute","setState","_conveyers","push","x1","y1","x2","y2","_onMouseMove","rect","getBoundingClientRect","screenX","screenY","top","_onClick","_nodes","fetchMachineData","tool","name","fetch","then","res","json","console","log","_data","data","maxInput1","maxInput2","maxInput3","maxInput4","output","render","bind","map","conveyer"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Machine from './machine.js'\r\nimport Conveyer from './conveyer.js'\r\nimport MachineCursor from './machineCursor.js'\r\nimport MachineName from './machineName.js'\r\nimport MachineNode from '../backend/machineNode.js'\r\nimport MachineOutput from './machineOutput.js'\r\nimport '../css/canvas.css'\r\n\r\n\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        x: 0, \r\n        y: 0, \r\n        nodes: [],\r\n        conveyers: [],\r\n        currentTarget: null,\r\n        selector: false,\r\n      };\r\n\r\n    }\r\n\r\n    handleMachineClick(e) { //conveyer connector tool\r\n      e.stopPropagation()\r\n\r\n      let _currentTarget = null;\r\n\r\n      if(!this.state.selector) {\r\n        for(let node of this.state.nodes) {\r\n          if(node.x === e.target.getAttribute(\"cx\") && node.y === e.target.getAttribute(\"cy\")) {\r\n            _currentTarget = node\r\n            return\r\n          }\r\n        }\r\n        this.setState({\r\n          currentTarget: _currentTarget,\r\n          selector: true\r\n        })\r\n      }\r\n\r\n      else {\r\n        //creates a new conveyer\r\n        let _conveyers = this.state.conveyers;\r\n        _conveyers.push({x1: this.state.currentTarget.x1, y1: this.state.currentTarget.y1, x2: e.target.getAttribute(\"cx\"), y2: e.target.getAttribute(\"cy\")});\r\n        this.setState({\r\n          conveyers: _conveyers,\r\n          currentTarget: {},\r\n          selector: false\r\n        })\r\n      }\r\n      \r\n    }\r\n\r\n\r\n    _onMouseMove(e) {\r\n      let rect = e.target.getBoundingClientRect()\r\n      this.setState({ x: e.screenX - rect.x, y: e.screenY - rect.y - rect.top + 50}); //50 to fix the bugs with cursors\r\n    }\r\n\r\n    _onClick(e) { //at some point make this so that it's not redrawing all of them every frame, just stamps somewhere more permanent instead\r\n      let _nodes = this.state.nodes;\r\n      this.fetchMachineData(this.props.tool, this.state.nodes)\r\n    }\r\n\r\n    fetchMachineData(name, _nodes) {\r\n      //fetch request for all of the data so that we ensure it's only done once and stored in state\r\n        fetch('http://localhost:6969/getmachinedata?name=' + name)\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            console.log('response')\r\n            console.log(res)\r\n            let _data = new MachineNode(\r\n                              res.data[0].name, \r\n                              res.data[0].maxInput1,\r\n                              res.data[0].maxInput2,\r\n                              res.data[0].maxInput3,\r\n                              res.data[0].maxInput4,\r\n                              res.data[0].output\r\n                            )\r\n            _nodes.push({x: this.state.x, y: this.state.y, data: _data})\r\n            console.log(_nodes)\r\n            this.setState({nodes: _nodes})\r\n            })\r\n    }\r\n  \r\n    render() {\r\n      const { x, y } = this.state;\r\n        return(\r\n          <div onMouseMove={this._onMouseMove.bind(this)} onClick={this._onClick.bind(this)} className=\"canvas\">\r\n            <svg width=\"100%\" height=\"100%\" className={this.state.selector ? \"canvas-selector\" : \"canvas\"}>\r\n              {/* maps all machines and conveyers */}\r\n              {/* need to be able to pass down all data stored in a machine object that we create in this class and store in the array instead of key/val chain */}\r\n              {this.state.nodes.map(node => \r\n                <>\r\n                  <Machine onClick={this.handleMachineClick.bind(this)} x={node.x} y={node.y} data={node.data}/>\r\n                  <MachineOutput x={node.x} y={node.y} data={node.data}/>\r\n                  <MachineName name={node.data.name} x={node.x} y={node.y}/>\r\n                </>\r\n              )}\r\n              {this.state.conveyers.map(conveyer => \r\n                <Conveyer x1={conveyer.x1} y1={conveyer.y1} x2={conveyer.x2} y2={conveyer.y2} />\r\n              )} \r\n              <MachineCursor x={x} y={y} onMouseMove={this._onMouseMove.bind(this)}/>\r\n            </svg>\r\n          </div>\r\n          )\r\n    }\r\n  }\r\n\r\nexport default Canvas;\r\n\r\n\r\n// this.state.selector ? {cursor: \"pointer\"} : {cursor: \"auto\"}"]},"metadata":{},"sourceType":"module"}