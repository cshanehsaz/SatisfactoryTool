{"ast":null,"code":"export default class MachineNode {\n  constructor(_name, _input1, _input2, _input3, _input4, _output) {\n    this.name = _name;\n    this.children = [];\n    this.input1 = _input1; // {name:, amount:, max: }\n\n    this.input2 = _input2;\n    this.input3 = _input3;\n    this.input4 = _input4;\n    this.output = _output;\n    this.currentOutput = []; // this.width;\n    // this.height;\n    // this.cost = [];\n  }\n\n  getOutput() {\n    return this.output;\n  }\n\n  getCurrentOutput() {\n    return this.currentOutput;\n  }\n\n  addCurrentOutput(child, material, amount) {\n    let out = {\n      child: child,\n      material: material,\n      amount: amount\n    };\n    this.getCurrentOutput().push(out);\n  }\n\n  getChildren() {\n    return this.children;\n  }\n\n  getInput1() {\n    return this.input1;\n  }\n\n  getInput2() {\n    return this.input2;\n  }\n\n  getInput3() {\n    return this.input3;\n  }\n\n  getInput4() {\n    return this.input4;\n  }\n\n  getInput() {\n    return [this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()];\n  }\n\n  getAvailableInput(material) {\n    return this.getInputMax(material) - this.getInputAmount(material);\n  }\n\n  addInput(material, amount) {\n    console.log(this.getInput());\n\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        input.amount = input.amount + amount; //Math.min(input.amount + _amount, this.getInputMax(material))\n\n        return input.amount;\n      }\n    }\n  }\n\n  setInput(material, amount) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        input.amount = amount;\n        return input;\n      }\n    }\n\n    return -1;\n  }\n\n  removeInput(material, amount) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        input.amount -= amount;\n        return input.amount;\n      }\n    }\n  }\n\n  addOutput(_name, _amount) {\n    this.output = {\n      name: _name,\n      amount: _amount\n    };\n  }\n\n  getInputAmount(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.amount;\n      }\n    }\n\n    return 0;\n  }\n\n  checkInput(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getInputMax(material) {\n    for (let input of this.getInput()) {\n      if (input.name === material) {\n        return input.max;\n      }\n    }\n\n    return 0;\n  } // edit this so that it correctly splits the output \n  // and records how much of what is sent to which child\n\n\n  sendOutput() {\n    let material = this.getOutput().name;\n    let amount = this.getOutput().amount;\n    let allChildren = this.getChildren();\n    let children = [];\n\n    for (let child of allChildren) {\n      if (child.checkInput(material)) {\n        children.push(child);\n      }\n    }\n\n    let numChildren = children.length;\n    let split = this.getOutput().amount / numChildren;\n\n    for (let i = 0; i < children.length - 1; i++) {\n      children[i].removeInput(material, amount / (children.length - 1));\n    } //if too much output, just set all to max\n\n\n    let availableInput = 0;\n\n    for (let child of children) {\n      availableInput += child.getAvailableInput(material);\n    }\n\n    if (availableInput < amount) {\n      for (let child of children) {\n        child.setInput(material, child.getInputMax(material));\n      }\n\n      return;\n    }\n\n    for (let child of children) {\n      child.addInput(material, split);\n    }\n\n    MachineNode.evenOutputSplit(children, material);\n  }\n\n  static evenOutputSplit(children, material) {\n    if (children.length <= 1) {\n      return;\n    }\n\n    let i = 0;\n    let countGood = 0;\n    let childrenToUpdate = [];\n\n    while (true) {\n      //make all children even split and not above max\n      let diff = children[i].getAvailableInput(material);\n      let nextChild = i + 1 >= children.length ? 0 : i + 1;\n\n      if (diff <= 0) {\n        children[i].setInput(material, children[i].getInputAmount(material) - 1);\n        children[nextChild].setInput(material, children[nextChild].getInputAmount(material) + 1);\n        countGood = 0;\n      } else {\n        countGood++;\n      }\n\n      i = nextChild;\n\n      if (countGood === children.length) {\n        break;\n      }\n    }\n\n    let total = 0;\n\n    for (let child of childrenToUpdate) {\n      total += child.getInputAmount(material);\n    }\n\n    for (let child of childrenToUpdate) {\n      child.setInput(material, total / childrenToUpdate.length());\n    }\n  }\n\n  wipeOutputToChildren(output, children) {\n    if (children.length <= 1) {\n      return;\n    }\n\n    console.log('wiped');\n    let split = Math.round(output.amount / Math.max(children.length, 1));\n\n    for (let child of children) {\n      child.removeInput(output.name, split);\n    }\n  }\n\n  splitOutput(output, children) {\n    let material = output.name;\n    let amount = output.amount;\n    this.wipeOutputToChildren(output, children);\n    let countAtMax = 0; //if at full capacity don't count in the split\n\n    for (let child of children) {\n      if (child.getInputAmount(material) === child.getInputMax(material)) {\n        countAtMax += 1;\n      }\n    }\n\n    let split = Math.round(amount / (children.length - countAtMax));\n\n    for (let child of children) {\n      child.addInput(material, split);\n      amount -= split;\n    }\n\n    if (amount > 0) {\n      this.splitOutput(material, amount, children);\n    }\n  }\n\n  addChild(_child) {\n    //sets a child node and adds parent\n    this.children.push(_child);\n  }\n\n  removeChild(_child) {\n    for (let child of this.getChildren()) {\n      if (_child === child) {\n        this.children = this.getChildren().filter(c => {\n          return c !== _child;\n        });\n      }\n    }\n  }\n\n  wipeInput() {\n    this.input = [];\n  }\n\n  wipeInputOutput() {\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n  wipeChildrenInput() {\n    for (let child of this.children) {\n      child.wipeInput();\n    }\n  }\n\n  wipeChildren() {\n    this.children = [];\n  }\n\n  wipeAll() {\n    this.children = [];\n    this.maxInput = [];\n    this.input = []; //[{name: a, amount:x}, ...]\n\n    this.output = {};\n  }\n\n}","map":{"version":3,"sources":["C:/Users/cshan/Box Sync/website/satisfactory2/src/backend/machineNode.js"],"names":["MachineNode","constructor","_name","_input1","_input2","_input3","_input4","_output","name","children","input1","input2","input3","input4","output","currentOutput","getOutput","getCurrentOutput","addCurrentOutput","child","material","amount","out","push","getChildren","getInput1","getInput2","getInput3","getInput4","getInput","getAvailableInput","getInputMax","getInputAmount","addInput","console","log","input","setInput","removeInput","addOutput","_amount","checkInput","max","sendOutput","allChildren","numChildren","length","split","i","availableInput","evenOutputSplit","countGood","childrenToUpdate","diff","nextChild","total","wipeOutputToChildren","Math","round","splitOutput","countAtMax","addChild","_child","removeChild","filter","c","wipeInput","wipeInputOutput","wipeChildrenInput","wipeChildren","wipeAll","maxInput"],"mappings":"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","sourcesContent":["export default class MachineNode {\r\n    constructor(_name, _input1, _input2, _input3, _input4, _output) {\r\n        this.name = _name;\r\n        this.children = [];\r\n        this.input1 = _input1; // {name:, amount:, max: }\r\n        this.input2 = _input2;\r\n        this.input3 = _input3;\r\n        this.input4 = _input4;\r\n        this.output = _output;\r\n        this.currentOutput = [];\r\n        // this.width;\r\n        // this.height;\r\n        // this.cost = [];\r\n    }\r\n\r\n    getOutput() {\r\n        return (this.output)\r\n    }\r\n\r\n    getCurrentOutput() {\r\n        return (this.currentOutput)\r\n    }\r\n\r\n    addCurrentOutput(child, material, amount) {\r\n        let out = {child: child, material: material, amount: amount}\r\n        this.getCurrentOutput().push(out)\r\n    }\r\n\r\n    getChildren() {\r\n        return (this.children)\r\n    }\r\n\r\n    getInput1() {\r\n        return (this.input1)\r\n    }\r\n\r\n    getInput2() {\r\n        return (this.input2)\r\n    }\r\n\r\n    getInput3() {\r\n        return (this.input3)\r\n    }\r\n\r\n    getInput4() {\r\n        return (this.input4)\r\n    }\r\n\r\n    getInput() {\r\n        return([\r\n            this.getInput1(), this.getInput2(), this.getInput3(), this.getInput4()\r\n        ])\r\n    }\r\n\r\n    getAvailableInput(material) {\r\n        return(this.getInputMax(material) - this.getInputAmount(material))\r\n    }\r\n\r\n    addInput(material, amount) {\r\n        console.log(this.getInput())\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) {\r\n                input.amount = input.amount + amount//Math.min(input.amount + _amount, this.getInputMax(material))\r\n                return(input.amount)\r\n            }\r\n        }\r\n    }\r\n\r\n    setInput(material, amount) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) {\r\n                input.amount = amount;\r\n                return (input)\r\n            }\r\n        }\r\n        return (-1)\r\n    }\r\n\r\n    removeInput(material, amount) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) {\r\n                input.amount -= amount\r\n                return(input.amount)\r\n            }\r\n        }\r\n    }\r\n\r\n    addOutput(_name, _amount) {\r\n        this.output = {\r\n            name: _name,\r\n            amount: _amount\r\n        }\r\n    }\r\n\r\n    getInputAmount(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return (input.amount) }\r\n        }\r\n        return(0)\r\n    }\r\n\r\n    checkInput(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return (true) }\r\n        }\r\n        return (false)\r\n    }\r\n\r\n    getInputMax(material) {\r\n        for (let input of this.getInput()) {\r\n            if(input.name === material) { return(input.max) } \r\n        }\r\n        return(0)\r\n    }\r\n\r\n\r\n    // edit this so that it correctly splits the output \r\n    // and records how much of what is sent to which child\r\n\r\n    sendOutput() {\r\n        let material = this.getOutput().name;\r\n        let amount = this.getOutput().amount;\r\n        let allChildren = this.getChildren();\r\n        let children = [];\r\n\r\n        for(let child of allChildren) {\r\n            if( child.checkInput(material) ) { children.push(child) }\r\n        }\r\n\r\n        let numChildren = children.length\r\n        let split = this.getOutput().amount / numChildren\r\n\r\n\r\n        for(let i=0; i < (children.length - 1); i++) {\r\n            children[i].removeInput(material, amount / (children.length - 1))\r\n        }\r\n        \r\n\r\n        //if too much output, just set all to max\r\n        let availableInput = 0;\r\n        for (let child of children) {\r\n            availableInput += child.getAvailableInput(material)\r\n        }\r\n        if(availableInput < amount) {\r\n            for(let child of children) {\r\n                child.setInput(material, child.getInputMax(material))\r\n            }\r\n            return\r\n        }\r\n        \r\n        for (let child of children) {\r\n            child.addInput(material, split)\r\n        }\r\n\r\n        MachineNode.evenOutputSplit(children, material)\r\n    }\r\n\r\n    static evenOutputSplit(children, material) {\r\n        if(children.length <= 1){return}\r\n\r\n        let i = 0;\r\n        let countGood = 0;\r\n        let childrenToUpdate = [];\r\n\r\n        while(true) { //make all children even split and not above max\r\n            let diff = children[i].getAvailableInput(material)\r\n            let nextChild = ( i+1 >= children.length ) ? 0 : i+1\r\n\r\n            if(diff <= 0) {\r\n                children[i].setInput( material, children[i].getInputAmount(material) - 1 )\r\n                children[nextChild].setInput (material, children[nextChild].getInputAmount(material) + 1 )\r\n                countGood = 0;\r\n            } else {\r\n                countGood++\r\n            }\r\n            \r\n            i=nextChild;\r\n\r\n            if (countGood === children.length) { break }\r\n        }\r\n\r\n        let total = 0;\r\n        for (let child of childrenToUpdate) {\r\n            total += child.getInputAmount(material)\r\n        }\r\n        for (let child of childrenToUpdate) {\r\n            child.setInput(material, total / childrenToUpdate.length())\r\n        }\r\n\r\n\r\n    }\r\n\r\n    wipeOutputToChildren(output, children) {\r\n        if(children.length <= 1){ return }\r\n        console.log('wiped')\r\n        let split = Math.round( output.amount / Math.max( children.length, 1 ) )\r\n        for (let child of children) {\r\n            child.removeInput(output.name, split)\r\n        }\r\n    }\r\n\r\n    splitOutput(output, children) {\r\n        let material = output.name\r\n        let amount = output.amount\r\n        this.wipeOutputToChildren(output, children)\r\n        let countAtMax = 0;\r\n\r\n        //if at full capacity don't count in the split\r\n        for(let child of children) {\r\n            if(child.getInputAmount(material) === child.getInputMax(material)) { countAtMax += 1 }\r\n        }\r\n\r\n        let split = Math.round(amount / (children.length - countAtMax) )\r\n\r\n        for (let child of children) {\r\n            child.addInput(\r\n                material,\r\n                split\r\n            )\r\n            amount -= split\r\n        }\r\n\r\n        if(amount > 0) {\r\n            this.splitOutput(material, amount, children)\r\n        }\r\n    }\r\n\r\n    addChild(_child) { //sets a child node and adds parent\r\n        this.children.push(_child);\r\n    }\r\n    \r\n    removeChild(_child) {\r\n        for (let child of this.getChildren()) {\r\n            if (_child === child) {\r\n                this.children = this.getChildren().filter( (c) => {\r\n                    return (c !== _child)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    wipeInput() {\r\n        this.input = [];\r\n    }\r\n\r\n    wipeInputOutput() {\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n    wipeChildrenInput() {\r\n        for(let child of this.children) {\r\n            child.wipeInput()\r\n        }\r\n    }\r\n\r\n    wipeChildren() {\r\n        this.children = [];\r\n    }\r\n\r\n    wipeAll() {\r\n        this.children = [];\r\n        this.maxInput = [];\r\n        this.input = []; //[{name: a, amount:x}, ...]\r\n        this.output = {};\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}